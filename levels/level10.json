[[null, null, null, null, null, null, null, null, null, null, null, null, null, { "entity": "wall" }, null, null, null, null, null], [null, null, null, null, null, null, null, { "entity": "player", "info": {"name": 2, "direction": "S"}}, null, null, null, null, null, { "entity": "wall" }, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null, { "entity": "wall" }, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null, { "entity": "wall" }, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null, { "entity": "wall" }, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null, { "entity": "wall" }, null, null, null, null, { "entity": "chest" }], [null, null, null, null, null, null, null, null, null, null, null, null, null, { "entity": "door" }, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null, { "entity": "wall" }, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null, { "entity": "wall" }, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null, { "entity": "wall" }, null, null, null, null, null], [null, null, null, { "entity": "player", "info": {"name": 1, "direction": "S"}}, null, null, null, null, null, null, null, null, null, { "entity": "wall" }, null, null, null, null, null],
["hole", "A <i>for loop</i> is similar to the situation where your dad tells you to run around the house 5 times before you can eat dinner.  Consider the situation where your dad tells you to run around the house until dinner is ready.  This is similar to what we call a <i>while loop</i> in Python.  While dinner is not ready, you will keep running around the house- if dinner is never ready, you just keep running.  A while loop will keep repeating until a certain boolean condition is met.  For example, <code>count =1 while count<5 print count count+= 1</code>.  This will also print out 12345, just as in our example before the previous level, but this loop is fundamentally different.  In this level, you will have to work together with your friend for the first time.  One of you has the key to a locked trapdoor in your inventory, and the other has the key to a locked chest behind the locked trapdoor.  You will both have to implement while loops to try each key in each lock using the method <code>try_unlock(key)</code> to find a fit!"]]
